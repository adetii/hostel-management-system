import * as XLSX from 'xlsx';
import { HOSTEL_CONFIG } from '../pdf/pdfStyles';
import { SummaryData } from '../types/exportTypes';

// Setup worksheet with freeze panes and autofilter
export const setupWorksheet = (ws: XLSX.WorkSheet, dataLength: number) => {
  // Freeze first row (headers)
  ws['!freeze'] = { xSplit: 0, ySplit: 1 };
  
  // Add autofilter to data range
  const range = XLSX.utils.decode_range(ws['!ref'] || 'A1');
  ws['!autofilter'] = { ref: XLSX.utils.encode_range(range) };
  
  return ws;
};

// Apply header styles
export const applyHeaderStyles = (ws: XLSX.WorkSheet) => {
  const range = XLSX.utils.decode_range(ws['!ref'] || 'A1');
  
  // Style header row
  for (let col = range.s.c; col <= range.e.c; col++) {
    const cellAddress = XLSX.utils.encode_cell({ r: 0, c: col });
    if (!ws[cellAddress]) continue;
    
    ws[cellAddress].s = {
      font: { bold: true, color: { rgb: 'FFFFFF' } },
      fill: { fgColor: { rgb: '1E40AF' } }, // Elite Blue
      alignment: { horizontal: 'center', vertical: 'center' }
    };
  }
  
  return ws;
};

// Create summary sheet
export const createSummarySheet = (summaryData: SummaryData): XLSX.WorkSheet => {
  const data = Object.entries(summaryData).map(([key, value]) => ({
    Metric: key,
    Value: value
  }));
  
  // Add generation info
  data.push(
    { Metric: 'Generated On', Value: new Date().toLocaleDateString() },
    { Metric: 'Generated By', Value: HOSTEL_CONFIG.name }
  );
  
  const ws = XLSX.utils.json_to_sheet(data);
  return applyHeaderStyles(ws);
};

// Generate timestamped filename
export const generateFilename = (baseName: string, extension: string = 'xlsx'): string => {
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  return `${HOSTEL_CONFIG.name}_${baseName}_${timestamp}.${extension}`;
};
